// DO NOT FUCKING TOUCH 


package com.example.demo.bookSearch;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.objects.book;

@RestController
@Controller // This means that this class is a Controller
public class bookController {

	@Autowired // This means to get the bean called BooksRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private bookRespository BooksRepository;

	@GetMapping(path = "/search/top10")
	public @ResponseBody String gettop10() {
// This returns a JSON or XML with the Bookss
		List<book> list = BooksRepository.findAll();
		List<book> books = new ArrayList<>();

		for (int i = 0; i < list.size(); i++) {
			list.get(i).getcopiessold();
			if (books.size() < 10) {

				books.add(list.get(i));

			} else if (books.size() == 10) {

				sort(books);
			}
			if(books.size() == 10) {
				if(list.get(i).getcopiessold() > books.get(books.size()-1).getcopiessold()) {
					books.set(books.size()-1, list.get(i));

				}
			}

		}
		sort(books);
		
		String lob = "Top 10 Books\n";
		for(int i = 0; i < books.size(); i++) {
			lob += books.get(i) + "Number sold :" + books.get(i).getcopiessold()  + "\n";
		}
		return lob;
	}

	private void sort(List<book> books) {
		for (int x = 0; x < 10; x++) {
			for (int c = x; c < 10; c++) {
				if (books.get(x).getcopiessold() < books.get(c).getcopiessold()) {

					book bookTemp = books.get(x);
					books.set(x, books.get(c));
					books.set(c, bookTemp);
				}
			}
		}


	}
	
	
	@GetMapping(path = "/search/bookPlacement")
	public @ResponseBody String getbookPlacement(int place) {

		List<book> list = BooksRepository.findAll();
		List<book> books = new ArrayList<>();
		if(place >= list.size()) {
			place = list.size()-1;
		}
		for (int i = place-1; i >= 0; i--) {
			
			books.add(list.get(i));
		}
	
		String lob = "Books by placement \n";
		for(int i = 0; i < books.size(); i++) {
			lob += books.get(i) + "Index: " + i + "\n";
		}
		return lob;
	}

	


	
	

	
	
	//example search
	@GetMapping(path = "/search/genre")
	public String getBooksBygenre(@RequestParam String genre) {
		
		List<book> list =	BooksRepository.findBygenreIgnoreCase(genre);
		String lob = "List of Books by Genre\n";
		
		for(int i = 0 ; i < list.size(); i++) {
			lob += list.get(i).getBook() + " By: " + list.get(i).getauthor() + "\n";
			
		}
		return lob;

	}

	@GetMapping(path = "/search/book")
	public ResponseEntity<List<book>> findByisbn(@RequestParam Integer isbn) {
		return new ResponseEntity<>(BooksRepository.findByisbn(isbn), HttpStatus.OK);

	}
	
	@GetMapping(path = "/search/AllBooks")
	public @ResponseBody String getBooks() {
		
		List<book> list =	BooksRepository.findAll();
		
		String lob = "All books \n";
		for(int i = 0; i < list.size(); i++) {
			lob += list.get(i) + "Number sold :" + list.get(i).getcopiessold()  + "\n";
		}
		return lob;
 

	}

	@GetMapping(path = "/search/author")
	public ResponseEntity<List<book>> findByAuthor(@RequestParam String author) {
		return new ResponseEntity<>(BooksRepository.findByAuthor(author), HttpStatus.OK);

	}
	
	@GetMapping(path = "/search/Raiting")
	public String findByAuthor(@RequestParam float rating) {
		
		
		
		List<book> list =	BooksRepository.findByratingGreaterThanEqual(rating);
		
		String lob = "All books \n";
		for(int i = 0; i < list.size(); i++) {
			lob += list.get(i) + "Curent Rating:" + list.get(i).getRating()  + "\n";
		}
		return lob;
		
	

	}
	
	
	@GetMapping(path = "/Book/Add") //Must Have 8 KEYS
	public @ResponseBody Iterable<book> getAllBooksADD(Integer isbn, String author, String bookname, String bookdescrip, Float price,
            String genre, String publisher, Integer yearpublished, Integer copiessold) {
	// This returns a JSON or XML with the Books	
		BooksRepository.saveAndFlush(new book(isbn, author, bookname, bookdescrip, price, genre, publisher, yearpublished, copiessold,0.0));
		return BooksRepository.findAll();
	}
	
	

}